////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
function range(start, end, increment) {
  if (start === end) {
      return [];
  }
  var array = [];
  var current = start;
  increment = increment || 1;
  if (increment > 0) {
      while (current <= end) {
          array.push(current);
          current += increment;
      }
  } else {
      while (current >= end) {
          array.push(current);
          current += increment;
      }
  }
  return array;
}
////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
function sum(array) {
  var total = 0;
  loops = array.length;
  for ( var i = 0; i < loops; i ++ ) {
    total += array[i];
  }
  return total;
}
////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
function reverseArray(array) {
  var invertedArray = [];
  for (var i = array.length - 1; i >= 0; i--) {
    invertedArray.push(array[i]);
  }
  return invertedArray;
}
////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
function reverseArrayInPlace(array) {
  for (var i = 0; i<array.length; i+=2) {
      array.unshift(array[i]);
  }
  array.splice(Math.floor(array.length/2), array.length/2);
  return array;
}
////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
function arrayToList(array) {
  if (array.length === 0) {
    return null;
  }
  var object = {};
  object.value = array[0];
  object.rest = arrayToList(array.slice(1));
  return object;
}
////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
function listToArray(listValue) {
  var arrayResult = [];
  while (listValue) {
    arrayResult.push(listValue.value);
    listValue = listValue.rest;
  }
  return arrayResult;
}
////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
function prepend(value, list) {
  return {value, rest: list};
}
////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
function nth(list, n) {
  if (!list) {
    return undefined;
  } else if (n == 0) {
    return list.value;
  } else {
    return nth(list.rest, n - 1);
  }
}
////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
var deepEqual = function (x, y) {
  if ((typeof x == "object" && x != null) && (typeof y == "object" && y != null)) {
    if (Object.keys(x).length != Object.keys(y).length)
      return false;
    for (var prop in x) {
      if (y.hasOwnProperty(prop))
        return deepEqual(x[prop], y[prop]);
      }
    return Object.keys(x).length === 0 && Object.keys(y).length === 0;
  }
  else if (x !== y)
    return false;
  else
    return true;
}
////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
